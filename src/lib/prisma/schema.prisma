// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserRole {
	UNVERIFIED
	SUPERADMIN
	ADMIN
	USER
}
model User {
  name          	String
  image				String?
  email         	String		@id
  role				UserRole	@default(UNVERIFIED)

  walletConnected	Boolean		@default(false) @map(name: "wallet_connected")
  points			Float		@default(0.0)

  phoneVerified		Boolean		@default(false) @map(name: "phone_verified")
  emailVerified		Boolean		@default(false) @map(name: "email_verified")
  password			String?
  googleId			String?		@unique @map(name: "google_id")

  address1			String?
  address2			String?
  city				String?
  country			String?
  mobileno			String?		@unique

  createdAt     	DateTime	@default(now()) @map(name: "created_at")
  updatedAt     	DateTime	@updatedAt @map(name: "updated_at")

  transactions    Transaction[] 
  
  @@map(name: "users")
}

// shop having a version doesn't make sense
// so it just points to the current active shop
model Shop {
  id		Int			@default(autoincrement()) @unique

  name		String		@id

  shop		ShopH		@relation(fields: [id, name], references: [id, name])
  products	Product[]
  @@map(name: "shops")
  @@unique([id, name])
}
model ShopH {
  id			Int			@id
  createdAt		DateTime	@default(now())
  updatedAt		DateTime	@updatedAt

  name			String

  isActive  	Shop?
  products		ProductH[]
  @@map(name: "shops_h")
  @@unique([id, name])
}

enum ProductCategory {
  BF // @map("Beauty & Fashion")
  DS // @map("Department Stores")
  EL // @map("Electronics")
  FD // @map("Food & Drinks")
  GM // @map("Gaming")
  HB // @map("Hobbies")
  LS // @map("Lifestyle")
  TR // @map("Travel")
  OS // @map("Online Shopping")
}

model Product {
	id			Int			@default(autoincrement()) @unique
	version		Int
	shopId		Int

	name		String
	shopName	String

	shop		Shop		@relation(fields: [shopId], references: [id], onDelete: Cascade)
	product		ProductH	@relation(fields: [id, version, name, shopId, shopName], references: [id, version, name, shopId, shopName])
	codes		Code[]
	@@id([name, shopName])
	@@unique([id, version, name, shopId, shopName])
	@@unique([id, name, shopId, shopName])
}
model ProductH {
  id			Int
  version		Int			@default(0)
  dateCreated	DateTime	@default(now())
  shopId		Int

  shopName		String
  name			String
  price			Float
  tos			String
  details		String
  category		ProductCategory?	// TODO: fix this
  
  isActive		Product?
  shop			ShopH		@relation(fields: [shopId, shopName], references: [id, name])
  purchasedCodes	CodeH[]
  @@id([id, version])
  @@map(name: "products_h")
  @@unique([id, version, name, shopId, shopName])
}

// current active codes is tied to the most recent product
// only purchased codes are tied to a specific version
// purchased codes also should not be visible to the user
// only here for unique constraints
model Code {
  shopId		Int
  productId		Int

  code			String
  shopName		String		@map(name: "shop_name")
  productName	String		@map(name: "product_name")
  
  isUsed		CodeH?		@relation(fields: [code, shopId], references: [code, shopId])
  product		Product		@relation(fields: [productId, productName, shopId, shopName], references: [id, name, shopId, shopName], onDelete: Cascade)

  @@unique([code, shopId])
  @@id([code, shopName])
  @@map(name: "codes")
}
model CodeH {
	shopId			Int
	productId		Int
	productVersion	Int
	dateCreated		DateTime	@updatedAt

	code			String
	shopName		String
	productName		String
	
	userEmail		String
	transactionDate	DateTime
	transactionItem	Transaction	@relation(fields: [userEmail, transactionDate], references: [userEmail, date])

	rel_code		Code?
	rel_product		ProductH	@relation(fields: [productId, productName, shopId, shopName, productVersion], references: [id, name, shopId, shopName, version])
	@@id([code, shopId])
}

model Transaction {
  date          DateTime @default(now())
  userEmail     String
  user          User      @relation(fields: [userEmail], references: [email])

  type          TransactionType
  total         Float
  pointsBalance Int

  items      	CodeH[]

  @@id([userEmail, date])
}

enum TransactionType {
  DEPOSIT
  PURCHASE
}
// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserRole {
	UNVERIFIED
	SUPERADMIN
	ADMIN
	USER
}
model User {
  name          	String
  image				String?
  email         	String		@id
  role				UserRole	@default(UNVERIFIED)

  walletConnected	Boolean		@default(false) @map(name: "wallet_connected")
  points			Float		@default(0.0)

  phoneVerified		Boolean		@default(false) @map(name: "phone_verified")
  emailVerified		Boolean		@default(false) @map(name: "email_verified")
  password			String?
  googleId			String?		@unique @map(name: "google_id")

  address1			String?
  address2			String?
  city				String?
  country			String?
  mobileno			String?		@unique

  createdAt     	DateTime	@default(now()) @map(name: "created_at")
  updatedAt     	DateTime	@updatedAt @map(name: "updated_at")

  transactions    Transaction[] 
  
  @@map(name: "users")
}

model Shop {
  name		String		@id
  products	Product[]

  @@map(name: "shops")
}

enum ProductCategory {
  UK // @map("Unknown")
  BF // @map("Beauty & Fashion")
  DS // @map("Department Stores")
  EL // @map("Electronics")
  FD // @map("Food & Drinks")
  GM // @map("Gaming")
  HB // @map("Hobbies")
  LS // @map("Lifestyle")
  TR // @map("Travel")
  OS // @map("Online Shopping")
}

model Product {
  shopName	String			@map(name: "shop_name")
  name		String
  price		Float
  tos		String
  details	String
  category	ProductCategory	@default(UK)
  
  shop		Shop			@relation(fields: [shopName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  codes		Code[]

  transactionItems      TransactionItem[]

  @@map(name: "products")
  @@id([name, shopName])
}

model Code {
  code			String

  productName	String		@map(name: "product_name")
  shopName		String		@map(name: "shop_name")
  product		Product		@relation(fields: [productName, shopName], references: [name, shopName], onDelete: Cascade, onUpdate: Cascade)

  @@id([code, shopName])
  @@map(name: "codes")
}

model Transaction {
  date          DateTime @default(now())
  userEmail     String
  user          User      @relation(fields: [userEmail], references: [email])

  type          TransactionType
  total         Float
  pointsBalance Int

  items      TransactionItem[]

  @@id([userEmail, date])
}

model TransactionItem {
  productName String
  shopName String
  product Product @relation(fields: [productName, shopName], references: [name, shopName])

  userEmail String
  transactionDate DateTime
  transaction Transaction @relation(fields: [userEmail, transactionDate], references: [userEmail, date])

  @@id([productName, shopName, userEmail, transactionDate])
}

enum TransactionType {
  DEPOSIT
  PURCHASE
}
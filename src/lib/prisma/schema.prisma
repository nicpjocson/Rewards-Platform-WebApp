// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum UserRole {
	UNVERIFIED
	SUPERADMIN
	ADMIN
	USER
}
model User {
  name          	String
  image				String?
  email         	String		@id
  role				UserRole	@default(UNVERIFIED)

  walletConnected	Boolean		@default(false) @map(name: "wallet_connected")
  points			Float		@default(0.0)

  phoneVerified		Boolean		@default(false) @map(name: "phone_verified")
  emailVerified		Boolean		@default(false) @map(name: "email_verified")
  password			String?
  googleId			String?		@unique @map(name: "google_id")

  address1			String?
  address2			String?
  city				String?
  country			String?
  mobileno			String?		@unique

  createdAt     	DateTime	@default(now()) @map(name: "created_at")
  updatedAt     	DateTime	@updatedAt @map(name: "updated_at")

  transactions    Transaction[] 
  
  @@map(name: "users")
}

model ShopH {
  id		String		@default(cuid()) @id
  name		String

  isActive  Shop?
  products	ProductH[]

  @@map(name: "shops_h")
  @@unique([id, name]) // required for relation
}
model Shop {
  name		String		@id
  
  id		String		@unique
  shop		ShopH		@relation(fields: [id, name], references: [id, name])
  rel_products	Product[]
  @@map(name: "shops")
  @@unique([id, name]) // required for relation
}

enum ProductCategory {
  BF // @map("Beauty & Fashion")
  DS // @map("Department Stores")
  EL // @map("Electronics")
  FD // @map("Food & Drinks")
  GM // @map("Gaming")
  HB // @map("Hobbies")
  LS // @map("Lifestyle")
  TR // @map("Travel")
  OS // @map("Online Shopping")
}

model ProductH {
  id			String			@default(cuid()) @id
  shopId		String
  shopName		String			@map(name: "shop_name")
  name			String
  isActive		Product?

  price			Float
  tos			String
  details		String
  category		ProductCategory?	// TODO: fix this
  
  shop			ShopH			@relation(fields: [shopId, shopName], references: [id, name])
  codes			Code[]
  purchasedCodes	CodeH[]

  @@map(name: "products_h")
  @@unique([id, name, shopId, shopName]) // required for relation
}
model Product {
	name		String
	shopName	String
	id			String
	shopId		String

	rel_shop	Shop		@relation(fields: [shopName], references: [name], onDelete: Cascade)
	product		ProductH	@relation(fields: [id, name, shopId, shopName], references: [id, name, shopId, shopName])
	rel_codes	Code[]
	@@id([shopName, name])
	@@unique([id, name, shopId, shopName]) // required for relation
}
model CodeH {
	code			String
	shopName		String
	productName		String
	
	shopId			String
	productId		String
	
	userEmail		String
	transactionDate	DateTime
	itemId			Int
	transactionItem	TransactionItem	@relation(fields: [userEmail, transactionDate, itemId], references: [userEmail, transactionDate, itemId])

	rel_code		Code?
	rel_product		ProductH	@relation(fields: [productId, productName, shopId, shopName], references: [id, name, shopId, shopName])
	@@id([code, shopId])
	@@unique([userEmail, transactionDate, itemId]) // required for relation
}
model Code {
  code			String
  shopName		String		@map(name: "shop_name")
  productName	String		@map(name: "product_name")
  
  shopId		String
  productId		String
  
  isUsed		CodeH?		@relation(fields: [code, shopId], references: [code, shopId])
  rel_productH	ProductH	@relation(fields: [productId, productName, shopId, shopName], references: [id, name, shopId, shopName])
  rel_product	Product		@relation(fields: [shopName, productName], references: [shopName, name])

  @@id([code, shopName])
  @@map(name: "codes")
  @@unique([code, shopId]) // required for relation
}

model Transaction {
  date          DateTime @default(now())
  userEmail     String
  user          User      @relation(fields: [userEmail], references: [email])

  type          TransactionType
  total         Float
  pointsBalance Int

  items      TransactionItem[]

  @@id([userEmail, date])
}

model TransactionItem {
  code CodeH? // all transaction items are currently codes
  userEmail String
  transactionDate DateTime
  itemId Int
  transaction Transaction @relation(fields: [userEmail, transactionDate], references: [userEmail, date]  )

  @@id([userEmail, transactionDate, itemId])
}

enum TransactionType {
  DEPOSIT
  PURCHASE
}